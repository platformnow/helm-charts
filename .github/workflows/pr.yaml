name: Pull Request

on:
  pull_request:
    branches:
      - main
    paths:
      - 'charts/**/*'

jobs:
  renovate-bump-chart-version:
    name: Renovate Bump Chart Version
    runs-on: ubuntu-latest
    if: github.actor == 'renovate[bot]'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: '3.13'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Detect changed charts
        id: list-changed
        run: |
          changed="$(ct list-changed --config .github/linters/ct.yaml)"
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "changed_list=${changed//$'\n'/ }" >> "$GITHUB_OUTPUT"
          fi

      - name: Bump chart version
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
        run: |
          if [[ $CHANGED_LIST == *" "* ]]; then
            echo "Multiple charts changed, skipping bumping chart version"
            exit 0
          fi

          CHART_VERSION=$(grep -e "^version:" "$CHART/Chart.yaml" | cut -d ":" -f 2 | tr -d '[:space:]' | tr -d '"')
          # For Renovate PRs, append -0 to the existing version
          CHART_NEW_VERSION="${CHART_VERSION}-0"
          
          sed -i "s/^version:.*/version: \"${CHART_NEW_VERSION}\"/" "$CHART/Chart.yaml"

      - name: Commit changes
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        run: |
          curl https://api.github.com/graphql -f \
               -sSf -H "Authorization: Bearer $GITHUB_TOKEN" \
               --data @- <<GRAPHQL | jq
          {
            "query": "mutation (\$input: CreateCommitOnBranchInput!) {
              createCommitOnBranch(input: \$input) { 
                commit { 
                  url 
                } 
              } 
            }",
            "variables": {
              "input": {
                "branch": {
                  "repositoryNameWithOwner": "${{ github.repository }}",
                  "branchName": "$GITHUB_HEAD_REF"
                },
                "message": { "headline": "Update Chart.yaml" },
                "fileChanges": {
                  "additions": [
                    {
                      "path": "$CHART/Chart.yaml",
                      "contents": "$(base64 -w 0 <"$CHART/Chart.yaml")"
                    }
                  ]
                },
                "expectedHeadOid": "${{ github.sha }}"
              }
            }
          }
          GRAPHQL

  bump-chart-version:
    name: Bump Chart Version
    runs-on: ubuntu-latest
    if: github.actor != 'renovate[bot]'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: '3.13'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Detect changed charts
        id: list-changed
        run: |
          changed="$(ct list-changed --config .github/linters/ct.yaml)"
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "changed_list=${changed//$'\n'/ }" >> "$GITHUB_OUTPUT"
          fi

      - name: Bump chart version
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
        run: |
          if [[ $CHANGED_LIST == *" "* ]]; then
            echo "Multiple charts changed, skipping bumping chart version"
            exit 0
          fi

          CHART_VERSION=$(grep -e "^version:" "$CHART/Chart.yaml" | cut -d ":" -f 2 | tr -d '[:space:]' | tr -d '"')
          # Check if version already has build metadata
          if [[ "$CHART_VERSION" == *"-"* ]]; then
            # Extract base version and build number
            BASE_VERSION=${CHART_VERSION%-*}
            BUILD_NUM=${CHART_VERSION#*-}
            # Increment build number
            NEW_BUILD_NUM=$((BUILD_NUM + 1))
            CHART_NEW_VERSION="${BASE_VERSION}-${NEW_BUILD_NUM}"
          else
            # Start with build number 1
            CHART_NEW_VERSION="${CHART_VERSION}-1"
          fi
          
          sed -i "s/^version:.*/version: \"${CHART_NEW_VERSION}\"/" "$CHART/Chart.yaml"

      - name: Commit changes
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        run: |
          curl https://api.github.com/graphql -f \
               -sSf -H "Authorization: Bearer $GITHUB_TOKEN" \
               --data @- <<GRAPHQL | jq
          {
            "query": "mutation (\$input: CreateCommitOnBranchInput!) {
              createCommitOnBranch(input: \$input) { 
                commit { 
                  url 
                } 
              } 
            }",
            "variables": {
              "input": {
                "branch": {
                  "repositoryNameWithOwner": "${{ github.repository }}",
                  "branchName": "$GITHUB_HEAD_REF"
                },
                "message": { "headline": "Update Chart.yaml" },
                "fileChanges": {
                  "additions": [
                    {
                      "path": "$CHART/Chart.yaml",
                      "contents": "$(base64 -w 0 <"$CHART/Chart.yaml")"
                    }
                  ]
                },
                "expectedHeadOid": "${{ github.sha }}"
              }
            }
          }
          GRAPHQL

  helm-template-diff:
    name: Helm Template Diff
    needs: renovate-bump-chart-version
    if: github.actor == 'renovate[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0
        with:
          version: v3.12.0

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Install Helm Diff Plugin
        run: helm plugin install https://github.com/databus23/helm-diff

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed="$(ct list-changed --config .github/linters/ct.yaml)"
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "changed_list=${changed//$'\n'/ }" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate diffs for each chart
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
        id: generate-diffs
        run: |
          DIFF_OUTPUT=""
          WORK_DIR="$(pwd)"
          
          echo "===== STARTING HELM DIFF GENERATION ====="
          echo "Processing chart: $CHART"
          echo "Working directory: $WORK_DIR"
          
          echo "===== CREATING TEMPORARY DIRECTORIES ====="
          mkdir -p "$WORK_DIR/old/$(dirname "$CHART")" "$WORK_DIR/new/$(dirname "$CHART")"
          mkdir -p "$WORK_DIR/old_extracted" "$WORK_DIR/new_extracted"
          echo "Created directories:"
          echo "- $WORK_DIR/old/$(dirname "$CHART")"
          echo "- $WORK_DIR/new/$(dirname "$CHART")"
          echo "- $WORK_DIR/old_extracted"
          echo "- $WORK_DIR/new_extracted"
          
          echo "===== PROCESSING OLD CHART VERSION ====="
          git checkout ${{ github.event.pull_request.base.sha }}
          echo "Using base SHA: ${{ github.event.pull_request.base.sha }}"
          if [ -d "$CHART" ]; then
            echo "Chart directory exists in base branch"
            cp -r "$CHART" "$WORK_DIR/old/$(dirname "$CHART")/"
            echo "Copied chart to $WORK_DIR/old/$(dirname "$CHART")/"
            cd "$WORK_DIR/old/$CHART"
            echo "Current directory: $(pwd)"
            echo "Running helm dependency update for old chart..."
            helm dependency update
            echo "Helm dependency update completed"
            
            # Extract all chart dependencies
            if [ -d "charts" ]; then
              echo "Charts directory found, extracting dependencies..."
              for chart_tgz in charts/*.tgz; do
                if [ -f "$chart_tgz" ]; then
                  echo "Extracting old dependency: $chart_tgz"
                  mkdir -p "$WORK_DIR/old_extracted/$(basename "$chart_tgz" .tgz)"
                  tar -xzf "$chart_tgz" -C "$WORK_DIR/old_extracted/$(basename "$chart_tgz" .tgz)" --strip-components=1
                  echo "Extracted to $WORK_DIR/old_extracted/$(basename "$chart_tgz" .tgz)"
                fi
              done
              echo "Listing extracted old dependencies:"
              ls -la "$WORK_DIR/old_extracted"
            else
              echo "No charts directory found in old version"
            fi
          else
            echo "Chart $CHART not found in base branch"
          fi
          
          echo "===== PROCESSING NEW CHART VERSION ====="
          cd "$WORK_DIR"
          git checkout ${{ github.sha }}
          echo "Using PR SHA: ${{ github.sha }}"
          if [ -d "$CHART" ]; then
            echo "Chart directory exists in PR branch"
            cp -r "$CHART" "$WORK_DIR/new/$(dirname "$CHART")/"
            echo "Copied chart to $WORK_DIR/new/$(dirname "$CHART")/"
            cd "$WORK_DIR/new/$CHART"
            echo "Current directory: $(pwd)"
            echo "Running helm dependency update for new chart..."
            helm dependency update
            echo "Helm dependency update completed"
            
            # Extract all chart dependencies
            if [ -d "charts" ]; then
              echo "Charts directory found, extracting dependencies..."
              for chart_tgz in charts/*.tgz; do
                if [ -f "$chart_tgz" ]; then
                  echo "Extracting new dependency: $chart_tgz"
                  mkdir -p "$WORK_DIR/new_extracted/$(basename "$chart_tgz" .tgz)"
                  tar -xzf "$chart_tgz" -C "$WORK_DIR/new_extracted/$(basename "$chart_tgz" .tgz)" --strip-components=1
                  echo "Extracted to $WORK_DIR/new_extracted/$(basename "$chart_tgz" .tgz)"
                fi
              done
              echo "Listing extracted new dependencies:"
              ls -la "$WORK_DIR/new_extracted"
            else
              echo "No charts directory found in new version"
            fi
          else
            echo "Chart $CHART not found in PR branch"
          fi
          
          echo "===== GENERATING CHART DIFF ====="
          cd "$WORK_DIR"
          if [ -d "$WORK_DIR/old/$CHART" ] && [ -d "$WORK_DIR/new/$CHART" ]; then
            echo "Generating diff for chart files (excluding charts directory)..."
            chart_diff=$(diff -ru --exclude=charts "$WORK_DIR/old/$CHART" "$WORK_DIR/new/$CHART" || true)
            if [ -n "$chart_diff" ]; then
              echo "Chart diff generated ($(echo "$chart_diff" | wc -l) lines)"
            else
              echo "No changes detected in chart files"
            fi
          else
            echo "Cannot generate chart diff - one or both chart directories missing"
            chart_diff=""
          fi
          
          echo "===== GENERATING DEPENDENCY DIFFS ====="
          deps_diff=""
          
          # Find all unique dependency names
          all_deps=()
          echo "Finding all unique dependency names..."
          for dep in "$WORK_DIR/old_extracted"/* "$WORK_DIR/new_extracted"/*; do
            if [ -d "$dep" ]; then
              dep_name=$(basename "$dep")
              if [[ ! " ${all_deps[@]} " =~ " ${dep_name} " ]]; then
                all_deps+=("$dep_name")
                echo "Found dependency: $dep_name"
              fi
            fi
          done
          echo "Total unique dependencies found: ${#all_deps[@]}"
          
          # Compare each dependency
          for dep_name in "${all_deps[@]}"; do
            echo "Processing dependency: $dep_name"
            old_dep="$WORK_DIR/old_extracted/$dep_name"
            new_dep="$WORK_DIR/new_extracted/$dep_name"
            
            if [ -d "$old_dep" ] && [ -d "$new_dep" ]; then
              # Both versions exist, compare them
              echo "Both old and new versions exist, comparing..."
              
              # Compare the entire chart structure
              echo "Generating diff for entire dependency structure..."
              dep_diff=$(diff -ru "$old_dep" "$new_dep" || true)
              if [ -n "$dep_diff" ]; then
                echo "Changes detected in $dep_name ($(echo "$dep_diff" | wc -l) lines)"
                deps_diff+="### Changes in $dep_name\n\n\`\`\`diff\n$dep_diff\n\`\`\`\n\n"
              else
                echo "No changes detected in $dep_name"
                deps_diff+="### No changes in $dep_name\n\n"
              fi
            elif [ -d "$old_dep" ]; then
              # Only old version exists
              echo "Dependency $dep_name was removed in new version"
              deps_diff+="### Dependency removed: $dep_name\n\n"
            elif [ -d "$new_dep" ]; then
              # Only new version exists
              echo "Dependency $dep_name is new in this version"
              deps_diff+="### New dependency: $dep_name\n\n"
            fi
          done
          
          echo "===== COMBINING RESULTS ====="
          # Combine the diffs with headers
          if [[ -n "$chart_diff" ]]; then
            echo "Adding chart diff to output"
            DIFF_OUTPUT+="### Changes in Chart Files\n\n\`\`\`diff\n$chart_diff\n\`\`\`\n\n"
          fi
          
          if [[ -n "$deps_diff" ]]; then
            echo "Adding dependency diffs to output"
            DIFF_OUTPUT+="$deps_diff"
          fi
          
          if [[ -n "$DIFF_OUTPUT" ]]; then
            echo "Setting output variables for PR comment"
            echo "has_diff=true" >> $GITHUB_OUTPUT
            echo "DIFF_OUTPUT<<EOF" >> $GITHUB_OUTPUT
            echo -e "$DIFF_OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "Diff generation completed successfully with changes detected"
          else
            echo "No changes detected in chart or dependencies"
          fi
          
          echo "===== HELM DIFF GENERATION COMPLETE ====="

      - name: Post Helm diff as PR comment
        if: steps.generate-diffs.outputs.has_diff == 'true'
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **Helm Template Changes** 🔍
            
            The following changes were detected in the Helm templates:
            
            ${{ steps.generate-diffs.outputs.DIFF_OUTPUT }}
