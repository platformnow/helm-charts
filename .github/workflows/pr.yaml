name: Pull Request

on:
  pull_request:
    branches:
      - main
    paths:
      - 'charts/**/*'

jobs:
  renovate-bump-chart-version:
    name: Renovate Bump Chart Version
    runs-on: ubuntu-latest
    if: github.actor == 'renovate[bot]'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: '3.13'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Detect changed charts
        id: list-changed
        run: |
          changed="$(ct list-changed --config .github/linters/ct.yaml)"
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "changed_list=${changed//$'\n'/ }" >> "$GITHUB_OUTPUT"
          fi

      - name: Bump chart version
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
        run: |
          if [[ $CHANGED_LIST == *" "* ]]; then
            echo "Multiple charts changed, skipping bumping chart version"
            exit 0
          fi

          CHART_VERSION=$(grep -e "^version:" "$CHART/Chart.yaml" | cut -d ":" -f 2 | tr -d '[:space:]' | tr -d '"')
          # For Renovate PRs, append -0 to the existing version
          CHART_NEW_VERSION="${CHART_VERSION}-0"
          
          sed -i "s/^version:.*/version: \"${CHART_NEW_VERSION}\"/" "$CHART/Chart.yaml"

      - name: Commit changes
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        run: |
          curl https://api.github.com/graphql -f \
               -sSf -H "Authorization: Bearer $GITHUB_TOKEN" \
               --data @- <<GRAPHQL | jq
          {
            "query": "mutation (\$input: CreateCommitOnBranchInput!) {
              createCommitOnBranch(input: \$input) { 
                commit { 
                  url 
                } 
              } 
            }",
            "variables": {
              "input": {
                "branch": {
                  "repositoryNameWithOwner": "${{ github.repository }}",
                  "branchName": "$GITHUB_HEAD_REF"
                },
                "message": { "headline": "Update Chart.yaml" },
                "fileChanges": {
                  "additions": [
                    {
                      "path": "$CHART/Chart.yaml",
                      "contents": "$(base64 -w 0 <"$CHART/Chart.yaml")"
                    }
                  ]
                },
                "expectedHeadOid": "${{ github.sha }}"
              }
            }
          }
          GRAPHQL

  bump-chart-version:
    name: Bump Chart Version
    runs-on: ubuntu-latest
    if: github.actor != 'renovate[bot]'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: '3.13'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Detect changed charts
        id: list-changed
        run: |
          changed="$(ct list-changed --config .github/linters/ct.yaml)"
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "changed_list=${changed//$'\n'/ }" >> "$GITHUB_OUTPUT"
          fi

      - name: Bump chart version
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
        run: |
          if [[ $CHANGED_LIST == *" "* ]]; then
            echo "Multiple charts changed, skipping bumping chart version"
            exit 0
          fi

          CHART_VERSION=$(grep -e "^version:" "$CHART/Chart.yaml" | cut -d ":" -f 2 | tr -d '[:space:]' | tr -d '"')
          # Check if version already has build metadata
          if [[ "$CHART_VERSION" == *"-"* ]]; then
            # Extract base version and build number
            BASE_VERSION=${CHART_VERSION%-*}
            BUILD_NUM=${CHART_VERSION#*-}
            # Increment build number
            NEW_BUILD_NUM=$((BUILD_NUM + 1))
            CHART_NEW_VERSION="${BASE_VERSION}-${NEW_BUILD_NUM}"
          else
            # Start with build number 1
            CHART_NEW_VERSION="${CHART_VERSION}-1"
          fi
          
          sed -i "s/^version:.*/version: \"${CHART_NEW_VERSION}\"/" "$CHART/Chart.yaml"

      - name: Commit changes
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        run: |
          curl https://api.github.com/graphql -f \
               -sSf -H "Authorization: Bearer $GITHUB_TOKEN" \
               --data @- <<GRAPHQL | jq
          {
            "query": "mutation (\$input: CreateCommitOnBranchInput!) {
              createCommitOnBranch(input: \$input) { 
                commit { 
                  url 
                } 
              } 
            }",
            "variables": {
              "input": {
                "branch": {
                  "repositoryNameWithOwner": "${{ github.repository }}",
                  "branchName": "$GITHUB_HEAD_REF"
                },
                "message": { "headline": "Update Chart.yaml" },
                "fileChanges": {
                  "additions": [
                    {
                      "path": "$CHART/Chart.yaml",
                      "contents": "$(base64 -w 0 <"$CHART/Chart.yaml")"
                    }
                  ]
                },
                "expectedHeadOid": "${{ github.sha }}"
              }
            }
          }
          GRAPHQL

  helm-template-diff:
    name: Helm Template Diff
    needs: renovate-bump-chart-version
    if: github.actor == 'renovate[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0
        with:
          version: v3.12.0

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Install Helm Diff Plugin
        run: helm plugin install https://github.com/databus23/helm-diff

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed="$(ct list-changed --config .github/linters/ct.yaml)"
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "changed_list=${changed//$'\n'/ }" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate diffs for each chart
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
        id: generate-diffs
        run: |
          DIFF_OUTPUT=""
          
          echo "Processing chart: $CHART"
          
          # Create temporary directories
          mkdir -p "old/$CHART" "new/$CHART"
          mkdir -p "old_deps" "new_deps"
          
          # Get and build old version dependencies
          git checkout ${{ github.event.pull_request.base.sha }}
          cp -r "$CHART" "old/"
          cd "old/$CHART"
          helm dependency update
          # Extract all .tgz files from charts directory
          for chart in charts/*.tgz; do
            if [ -f "$chart" ]; then
              tar -xzf "$chart" -C ../../old_deps/
            fi
          done
          cd ../..
          
          # Get and build new version dependencies
          git checkout ${{ github.sha }}
          cp -r "$CHART" "new/"
          cd "new/$CHART"
          helm dependency update
          # Extract all .tgz files from charts directory
          for chart in charts/*.tgz; do
            if [ -f "$chart" ]; then
              tar -xzf "$chart" -C ../../new_deps/
            fi
          done
          cd ../..
          
          # Generate diff for the chart itself (excluding charts directory)
          chart_diff=$(diff -ru --exclude=charts "old/$CHART" "new/$CHART" || true)
          
          # Generate diff for dependencies
          deps_diff=$(diff -ru "old_deps" "new_deps" || true)
          
          # Combine the diffs with headers
          if [[ -n "$chart_diff" ]]; then
            DIFF_OUTPUT+="### Changes in Chart Files\n\n\`\`\`diff\n$chart_diff\n\`\`\`\n\n"
          fi
          
          if [[ -n "$deps_diff" ]]; then
            DIFF_OUTPUT+="### Changes in Dependencies\n\n\`\`\`diff\n$deps_diff\n\`\`\`\n\n"
          fi
          
          if [[ -n "$DIFF_OUTPUT" ]]; then
            echo "has_diff=true" >> $GITHUB_OUTPUT
            echo "DIFF_OUTPUT<<EOF" >> $GITHUB_OUTPUT
            echo -e "$DIFF_OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Post Helm diff as PR comment
        if: steps.generate-diffs.outputs.has_diff == 'true'
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **Helm Template Changes** ð
            
            The following changes were detected in the Helm templates:
            
            ${{ steps.generate-diffs.outputs.DIFF_OUTPUT }}
