name: Pull Request

on:
  pull_request:
    branches:
      - main
    paths:
      - 'charts/**/*'

jobs:
  renovate-bump-chart-version:
    name: Renovate Bump Chart Version
    runs-on: ubuntu-latest
    if: github.actor == 'renovate[bot]'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: '3.13'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Detect changed charts
        id: list-changed
        run: |
          changed="$(ct list-changed --config .github/linters/ct.yaml)"
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "changed_list=${changed//$'\n'/ }" >> "$GITHUB_OUTPUT"
          fi

      - name: Bump chart version
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
        run: |
          if [[ $CHANGED_LIST == *" "* ]]; then
            echo "Multiple charts changed, skipping bumping chart version"
            exit 0
          fi

          CHART_VERSION=$(grep -e "^version:" "$CHART/Chart.yaml" | cut -d ":" -f 2 | tr -d '[:space:]' | tr -d '"')
          # For Renovate PRs, append -0 to the existing version
          CHART_NEW_VERSION="${CHART_VERSION}-0"
          
          sed -i "s/^version:.*/version: \"${CHART_NEW_VERSION}\"/" "$CHART/Chart.yaml"

      - name: Commit changes
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        run: |
          curl https://api.github.com/graphql -f \
               -sSf -H "Authorization: Bearer $GITHUB_TOKEN" \
               --data @- <<GRAPHQL | jq
          {
            "query": "mutation (\$input: CreateCommitOnBranchInput!) {
              createCommitOnBranch(input: \$input) { 
                commit { 
                  url 
                } 
              } 
            }",
            "variables": {
              "input": {
                "branch": {
                  "repositoryNameWithOwner": "${{ github.repository }}",
                  "branchName": "$GITHUB_HEAD_REF"
                },
                "message": { "headline": "Update Chart.yaml" },
                "fileChanges": {
                  "additions": [
                    {
                      "path": "$CHART/Chart.yaml",
                      "contents": "$(base64 -w 0 <"$CHART/Chart.yaml")"
                    }
                  ]
                },
                "expectedHeadOid": "${{ github.sha }}"
              }
            }
          }
          GRAPHQL

  bump-chart-version:
    name: Bump Chart Version
    runs-on: ubuntu-latest
    if: github.actor != 'renovate[bot]'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: '3.13'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Detect changed charts
        id: list-changed
        run: |
          changed="$(ct list-changed --config .github/linters/ct.yaml)"
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "changed_list=${changed//$'\n'/ }" >> "$GITHUB_OUTPUT"
          fi

      - name: Bump chart version
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
        run: |
          if [[ $CHANGED_LIST == *" "* ]]; then
            echo "Multiple charts changed, skipping bumping chart version"
            exit 0
          fi

          CHART_VERSION=$(grep -e "^version:" "$CHART/Chart.yaml" | cut -d ":" -f 2 | tr -d '[:space:]' | tr -d '"')
          # Check if version already has build metadata
          if [[ "$CHART_VERSION" == *"-"* ]]; then
            # Extract base version and build number
            BASE_VERSION=${CHART_VERSION%-*}
            BUILD_NUM=${CHART_VERSION#*-}
            # Increment build number
            NEW_BUILD_NUM=$((BUILD_NUM + 1))
            CHART_NEW_VERSION="${BASE_VERSION}-${NEW_BUILD_NUM}"
          else
            # Start with build number 1
            CHART_NEW_VERSION="${CHART_VERSION}-1"
          fi
          
          sed -i "s/^version:.*/version: \"${CHART_NEW_VERSION}\"/" "$CHART/Chart.yaml"

      - name: Commit changes
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        run: |
          curl https://api.github.com/graphql -f \
               -sSf -H "Authorization: Bearer $GITHUB_TOKEN" \
               --data @- <<GRAPHQL | jq
          {
            "query": "mutation (\$input: CreateCommitOnBranchInput!) {
              createCommitOnBranch(input: \$input) { 
                commit { 
                  url 
                } 
              } 
            }",
            "variables": {
              "input": {
                "branch": {
                  "repositoryNameWithOwner": "${{ github.repository }}",
                  "branchName": "$GITHUB_HEAD_REF"
                },
                "message": { "headline": "Update Chart.yaml" },
                "fileChanges": {
                  "additions": [
                    {
                      "path": "$CHART/Chart.yaml",
                      "contents": "$(base64 -w 0 <"$CHART/Chart.yaml")"
                    }
                  ]
                },
                "expectedHeadOid": "${{ github.sha }}"
              }
            }
          }
          GRAPHQL

  helm-template-diff:
    name: Helm Template Diff
    needs: renovate-bump-chart-version
    if: github.actor == 'renovate[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0
        with:
          version: v3.12.0

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Install Helm Diff Plugin
        run: helm plugin install https://github.com/databus23/helm-diff

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed="$(ct list-changed --config .github/linters/ct.yaml)"
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "changed_list=${changed//$'\n'/ }" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate diffs for each chart
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
        id: generate-diffs
        run: |
          DIFF_OUTPUT=""
          WORK_DIR="$(pwd)"
          
          echo "Processing chart: $CHART"
          
          # Create temporary directories with full path
          mkdir -p "$WORK_DIR/old/$CHART" "$WORK_DIR/new/$CHART" 
          mkdir -p "$WORK_DIR/old_deps_extracted" "$WORK_DIR/new_deps_extracted"
          
          # Get old version dependencies
          git checkout ${{ github.event.pull_request.base.sha }}
          echo "Using base SHA: ${{ github.event.pull_request.base.sha }}"
          cp -r "$CHART" "$WORK_DIR/old/"
          
          # Extract old dependency versions from Chart.yaml
          cd "$WORK_DIR/old/$CHART"
          OLD_DEPS=$(yq e '.dependencies[] | .name + "=" + .version + "=" + .repository' Chart.yaml)
          echo "Old dependencies:"
          echo "$OLD_DEPS"
          cd "$WORK_DIR"
          
          # Get new version dependencies
          git checkout ${{ github.sha }}
          echo "Using PR SHA: ${{ github.sha }}"
          cp -r "$CHART" "$WORK_DIR/new/"
          
          # Extract new dependency versions from Chart.yaml
          cd "$WORK_DIR/new/$CHART"
          NEW_DEPS=$(yq e '.dependencies[] | .name + "=" + .version + "=" + .repository' Chart.yaml)
          echo "New dependencies:"
          echo "$NEW_DEPS"
          cd "$WORK_DIR"
          
          # Process old dependencies
          echo "Processing old dependencies..."
          while IFS='=' read -r name version repo; do
            if [[ -n "$name" && -n "$version" && -n "$repo" ]]; then
              echo "Pulling old version of $name: $version from $repo"
              helm pull "$name" --version "$version" --repo "$repo" --untar -d "$WORK_DIR/old_deps_extracted"
            fi
          done <<< "$OLD_DEPS"
          
          # Process new dependencies
          echo "Processing new dependencies..."
          while IFS='=' read -r name version repo; do
            if [[ -n "$name" && -n "$version" && -n "$repo" ]]; then
              echo "Pulling new version of $name: $version from $repo"
              helm pull "$name" --version "$version" --repo "$repo" --untar -d "$WORK_DIR/new_deps_extracted"
            fi
          done <<< "$NEW_DEPS"
          
          # Generate diff for the chart itself (excluding charts directory)
          chart_diff=$(diff -ru --exclude=charts "$WORK_DIR/old/$CHART" "$WORK_DIR/new/$CHART" || true)
          
          # Generate diff for dependencies templates
          deps_diff=""
          for old_dep in "$WORK_DIR/old_deps_extracted"/*; do
            if [ -d "$old_dep" ]; then
              dep_name=$(basename "$old_dep")
              # Extract base name without version
              base_name=$(echo "$dep_name" | sed -E 's/(-[0-9]+\.[0-9]+\.[0-9]+.*)$//')
              
              # Find matching new dependency (may have different version)
              new_dep_path=""
              for new_dep in "$WORK_DIR/new_deps_extracted"/*; do
                if [ -d "$new_dep" ]; then
                  new_dep_name=$(basename "$new_dep")
                  new_base_name=$(echo "$new_dep_name" | sed -E 's/(-[0-9]+\.[0-9]+\.[0-9]+.*)$//')
                  if [ "$new_base_name" = "$base_name" ]; then
                    new_dep_path="$new_dep"
                    break
                  fi
                fi
              done
              
              if [ -n "$new_dep_path" ]; then
                echo "Comparing templates for $dep_name vs $(basename "$new_dep_path")..."
                # Focus on templates directory which contains the actual Kubernetes manifests
                if [ -d "$old_dep/templates" ] && [ -d "$new_dep_path/templates" ]; then
                  dep_diff=$(diff -ru "$old_dep/templates" "$new_dep_path/templates" || true)
                  if [ -n "$dep_diff" ]; then
                    deps_diff+="### Changes in $base_name templates ($(basename "$old_dep") → $(basename "$new_dep_path"))\n\n\`\`\`diff\n$dep_diff\n\`\`\`\n\n"
                  else
                    deps_diff+="### No template changes in $base_name ($(basename "$old_dep") → $(basename "$new_dep_path"))\n\n"
                  fi
                fi
              fi
            fi
          done
          
          # Check for new dependencies
          for new_dep in "$WORK_DIR/new_deps_extracted"/*; do
            if [ -d "$new_dep" ]; then
              new_dep_name=$(basename "$new_dep")
              new_base_name=$(echo "$new_dep_name" | sed -E 's/(-[0-9]+\.[0-9]+\.[0-9]+.*)$//')
              
              # Check if this is a new dependency
              found=false
              for old_dep in "$WORK_DIR/old_deps_extracted"/*; do
                if [ -d "$old_dep" ]; then
                  old_dep_name=$(basename "$old_dep")
                  old_base_name=$(echo "$old_dep_name" | sed -E 's/(-[0-9]+\.[0-9]+\.[0-9]+.*)$//')
                  if [ "$old_base_name" = "$new_base_name" ]; then
                    found=true
                    break
                  fi
                fi
              done
              
              if [ "$found" = false ]; then
                deps_diff+="### New dependency: $new_dep_name\n\n"
              fi
            fi
          done
          
          # Combine the diffs with headers
          if [[ -n "$chart_diff" ]]; then
            DIFF_OUTPUT+="### Changes in Chart Files\n\n\`\`\`diff\n$chart_diff\n\`\`\`\n\n"
          fi
          
          if [[ -n "$deps_diff" ]]; then
            DIFF_OUTPUT+="$deps_diff"
          fi
          
          if [[ -n "$DIFF_OUTPUT" ]]; then
            echo "has_diff=true" >> $GITHUB_OUTPUT
            echo "DIFF_OUTPUT<<EOF" >> $GITHUB_OUTPUT
            echo -e "$DIFF_OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Post Helm diff as PR comment
        if: steps.generate-diffs.outputs.has_diff == 'true'
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **Helm Template Changes** 🔍
            
            The following changes were detected in the Helm templates:
            
            ${{ steps.generate-diffs.outputs.DIFF_OUTPUT }}
