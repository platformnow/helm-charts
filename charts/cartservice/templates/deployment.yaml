apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.cartService.name }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.cartService.name }}
  template:
    metadata:
      {{- if .Values.cartDatabase.externalRedisTlsOrigination.enable }}
      annotations:
        sidecar.istio.io/userVolumeMount: '[{"name": "{{ .Values.cartDatabase.externalRedisTlsOrigination.name }}", "mountPath": "/etc/certs", "readonly": true}]'
        sidecar.istio.io/userVolume: '[{"name": "{{ .Values.cartDatabase.externalRedisTlsOrigination.name }}", "secret": {"secretName": "{{ .Values.cartDatabase.externalRedisTlsOrigination.name }}"}}]'
        proxy.istio.io/config: '{"holdApplicationUntilProxyStarts": true}'
      {{- end }}
      labels:
        app: {{ .Values.cartService.name }}
    spec:
      {{- if .Values.serviceAccounts.create }}
      serviceAccountName: {{ .Values.cartService.name }}
      {{- else }}
      serviceAccountName: default
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        {{- if .Values.seccompProfile.enable }}
        seccompProfile:
          type: {{ .Values.seccompProfile.type }}
        {{- end }}
      containers:
        - name: server
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - all
            privileged: false
            readOnlyRootFilesystem: true
        {{- if .Values.nativeGrpcHealthCheck }}
          image: {{ .Values.images.repository }}/{{ .Values.cartService.name }}:{{ .Values.images.tag | default .Chart.AppVersion }}-native-grpc-probes
        {{- else }}
          image: {{ .Values.images.repository }}/{{ .Values.cartService.name }}:{{ .Values.images.tag | default .Chart.AppVersion }}
        {{- end }}
          ports:
            - containerPort: {{ .Values.service.port }}
          env:
        {{- if eq .Values.cartDatabase.type "spanner" }}
            - name: SPANNER_CONNECTION_STRING
        {{- else }}
            - name: REDIS_ADDR
        {{- end }}
              value: {{ .Values.cartDatabase.connectionString | quote }}
          resources: {{ toYaml .Values.resources | nindent 10 }}
          readinessProbe:
            initialDelaySeconds: 15
          {{- if .Values.nativeGrpcHealthCheck }}
            grpc:
              port: {{ .Values.service.port }}
          {{- else }}
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:7070", "-rpc-timeout=5s"]
          {{- end }}
          livenessProbe:
            initialDelaySeconds: 15
            periodSeconds: 10
          {{- if .Values.nativeGrpcHealthCheck }}
            grpc:
              port: {{ .Values.service.port }}
          {{- else }}
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:7070", "-rpc-timeout=5s"]
          {{- end }}
